// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fish {

namespace {

const ::google::protobuf::Descriptor* packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ping_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ping_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ping_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ping_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* login_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  login_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* seat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seat_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_room_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_room_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_room_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_room_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* fire_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fire_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* fire_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fire_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* fire_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fire_notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* fish_refresh_notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fish_refresh_notify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fish_2eproto() {
  protobuf_AddDesc_fish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fish.proto");
  GOOGLE_CHECK(file != NULL);
  packet_descriptor_ = file->message_type(0);
  static const int packet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, body_),
  };
  packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      packet_descriptor_,
      packet::default_instance_,
      packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(packet));
  ping_req_descriptor_ = file->message_type(1);
  static const int ping_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_req, id_),
  };
  ping_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ping_req_descriptor_,
      ping_req::default_instance_,
      ping_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ping_req));
  ping_rsp_descriptor_ = file->message_type(2);
  static const int ping_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_rsp, id_),
  };
  ping_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ping_rsp_descriptor_,
      ping_rsp::default_instance_,
      ping_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ping_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ping_rsp));
  login_req_descriptor_ = file->message_type(3);
  static const int login_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, pwd_),
  };
  login_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_req_descriptor_,
      login_req::default_instance_,
      login_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_req));
  login_rsp_descriptor_ = file->message_type(4);
  static const int login_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp, room_type_),
  };
  login_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      login_rsp_descriptor_,
      login_rsp::default_instance_,
      login_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(login_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(login_rsp));
  enter_room_req_descriptor_ = file->message_type(5);
  static const int enter_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_req, room_type_),
  };
  enter_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_room_req_descriptor_,
      enter_room_req::default_instance_,
      enter_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_room_req));
  seat_descriptor_ = file->message_type(6);
  static const int seat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat, game_id_),
  };
  seat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      seat_descriptor_,
      seat::default_instance_,
      seat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(seat));
  enter_room_rsp_descriptor_ = file->message_type(7);
  static const int enter_room_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_rsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_rsp, room_users_),
  };
  enter_room_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_room_rsp_descriptor_,
      enter_room_rsp::default_instance_,
      enter_room_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_room_rsp));
  enter_room_notify_descriptor_ = file->message_type(8);
  static const int enter_room_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_notify, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_notify, game_id_),
  };
  enter_room_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_room_notify_descriptor_,
      enter_room_notify::default_instance_,
      enter_room_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_room_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_room_notify));
  fire_req_descriptor_ = file->message_type(9);
  static const int fire_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_req, angle_),
  };
  fire_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fire_req_descriptor_,
      fire_req::default_instance_,
      fire_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fire_req));
  fire_rsp_descriptor_ = file->message_type(10);
  static const int fire_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_rsp, state_),
  };
  fire_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fire_rsp_descriptor_,
      fire_rsp::default_instance_,
      fire_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fire_rsp));
  fire_notify_descriptor_ = file->message_type(11);
  static const int fire_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_notify, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_notify, angle_),
  };
  fire_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fire_notify_descriptor_,
      fire_notify::default_instance_,
      fire_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fire_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fire_notify));
  fish_refresh_notify_descriptor_ = file->message_type(12);
  static const int fish_refresh_notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fish_refresh_notify, fish_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fish_refresh_notify, line_id_),
  };
  fish_refresh_notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fish_refresh_notify_descriptor_,
      fish_refresh_notify::default_instance_,
      fish_refresh_notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fish_refresh_notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fish_refresh_notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fish_refresh_notify));
  cmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    packet_descriptor_, &packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ping_req_descriptor_, &ping_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ping_rsp_descriptor_, &ping_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_req_descriptor_, &login_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    login_rsp_descriptor_, &login_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_room_req_descriptor_, &enter_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    seat_descriptor_, &seat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_room_rsp_descriptor_, &enter_room_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_room_notify_descriptor_, &enter_room_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fire_req_descriptor_, &fire_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fire_rsp_descriptor_, &fire_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fire_notify_descriptor_, &fire_notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fish_refresh_notify_descriptor_, &fish_refresh_notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fish_2eproto() {
  delete packet::default_instance_;
  delete packet_reflection_;
  delete ping_req::default_instance_;
  delete ping_req_reflection_;
  delete ping_rsp::default_instance_;
  delete ping_rsp_reflection_;
  delete login_req::default_instance_;
  delete login_req_reflection_;
  delete login_rsp::default_instance_;
  delete login_rsp_reflection_;
  delete enter_room_req::default_instance_;
  delete enter_room_req_reflection_;
  delete seat::default_instance_;
  delete seat_reflection_;
  delete enter_room_rsp::default_instance_;
  delete enter_room_rsp_reflection_;
  delete enter_room_notify::default_instance_;
  delete enter_room_notify_reflection_;
  delete fire_req::default_instance_;
  delete fire_req_reflection_;
  delete fire_rsp::default_instance_;
  delete fire_rsp_reflection_;
  delete fire_notify::default_instance_;
  delete fire_notify_reflection_;
  delete fish_refresh_notify::default_instance_;
  delete fish_refresh_notify_reflection_;
}

void protobuf_AddDesc_fish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nfish.proto\022\004fish\"#\n\006packet\022\013\n\003cmd\030\001 \002("
    "\005\022\014\n\004body\030\003 \002(\014\"\026\n\010ping_req\022\n\n\002id\030\001 \001(\005\""
    "\026\n\010ping_rsp\022\n\n\002id\030\001 \001(\005\"%\n\tlogin_req\022\013\n\003"
    "acc\030\001 \002(\t\022\013\n\003pwd\030\002 \002(\t\">\n\tlogin_rsp\022\r\n\005s"
    "tate\030\001 \002(\005\022\017\n\007game_id\030\002 \001(\t\022\021\n\troom_type"
    "\030\003 \003(\005\"#\n\016enter_room_req\022\021\n\troom_type\030\001 "
    "\002(\005\"\'\n\004seat\022\016\n\006number\030\001 \002(\005\022\017\n\007game_id\030\002"
    " \002(\t\"\?\n\016enter_room_rsp\022\r\n\005state\030\001 \002(\005\022\036\n"
    "\nroom_users\030\002 \003(\0132\n.fish.seat\"4\n\021enter_r"
    "oom_notify\022\016\n\006number\030\001 \002(\005\022\017\n\007game_id\030\002 "
    "\002(\t\"\031\n\010fire_req\022\r\n\005angle\030\001 \002(\005\"\031\n\010fire_r"
    "sp\022\r\n\005state\030\001 \002(\005\",\n\013fire_notify\022\016\n\006numb"
    "er\030\001 \002(\005\022\r\n\005angle\030\002 \002(\005\"7\n\023fish_refresh_"
    "notify\022\017\n\007fish_id\030\001 \002(\005\022\017\n\007line_id\030\002 \002(\005"
    "*\371\001\n\003cmd\022\020\n\014CMD_PING_REQ\020d\022\020\n\014CMD_PING_R"
    "SP\020e\022\022\n\rCMD_LOGIN_REQ\020\351\007\022\022\n\rCMD_LOGIN_RS"
    "P\020\352\007\022\027\n\022CMD_ENTER_ROOM_REQ\020\353\007\022\027\n\022CMD_ENT"
    "ER_ROOM_RSP\020\354\007\022\032\n\025CMD_ENTER_ROOM_NOTIFY\020"
    "\355\007\022\021\n\014CMD_FIRE_REQ\020\356\007\022\021\n\014CMD_FIRE_RSP\020\357\007"
    "\022\024\n\017CMD_FIRE_NOTIFY\020\360\007\022\034\n\027CMD_FISH_REFRE"
    "SH_NOTIFY\020\361\007", 812);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fish.proto", &protobuf_RegisterTypes);
  packet::default_instance_ = new packet();
  ping_req::default_instance_ = new ping_req();
  ping_rsp::default_instance_ = new ping_rsp();
  login_req::default_instance_ = new login_req();
  login_rsp::default_instance_ = new login_rsp();
  enter_room_req::default_instance_ = new enter_room_req();
  seat::default_instance_ = new seat();
  enter_room_rsp::default_instance_ = new enter_room_rsp();
  enter_room_notify::default_instance_ = new enter_room_notify();
  fire_req::default_instance_ = new fire_req();
  fire_rsp::default_instance_ = new fire_rsp();
  fire_notify::default_instance_ = new fire_notify();
  fish_refresh_notify::default_instance_ = new fish_refresh_notify();
  packet::default_instance_->InitAsDefaultInstance();
  ping_req::default_instance_->InitAsDefaultInstance();
  ping_rsp::default_instance_->InitAsDefaultInstance();
  login_req::default_instance_->InitAsDefaultInstance();
  login_rsp::default_instance_->InitAsDefaultInstance();
  enter_room_req::default_instance_->InitAsDefaultInstance();
  seat::default_instance_->InitAsDefaultInstance();
  enter_room_rsp::default_instance_->InitAsDefaultInstance();
  enter_room_notify::default_instance_->InitAsDefaultInstance();
  fire_req::default_instance_->InitAsDefaultInstance();
  fire_rsp::default_instance_->InitAsDefaultInstance();
  fire_notify::default_instance_->InitAsDefaultInstance();
  fish_refresh_notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fish_2eproto {
  StaticDescriptorInitializer_fish_2eproto() {
    protobuf_AddDesc_fish_2eproto();
  }
} static_descriptor_initializer_fish_2eproto_;
const ::google::protobuf::EnumDescriptor* cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmd_descriptor_;
}
bool cmd_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int packet::kCmdFieldNumber;
const int packet::kBodyFieldNumber;
#endif  // !_MSC_VER

packet::packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void packet::InitAsDefaultInstance() {
}

packet::packet(const packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void packet::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

packet::~packet() {
  SharedDtor();
}

void packet::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return packet_descriptor_;
}

const packet& packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

packet* packet::default_instance_ = NULL;

packet* packet::New() const {
  return new packet;
}

void packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // required bytes body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required bytes body = 3;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required bytes body = 3;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void packet::MergeFrom(const packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void packet::CopyFrom(const packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void packet::Swap(packet* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = packet_descriptor_;
  metadata.reflection = packet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ping_req::kIdFieldNumber;
#endif  // !_MSC_VER

ping_req::ping_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ping_req::InitAsDefaultInstance() {
}

ping_req::ping_req(const ping_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ping_req::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ping_req::~ping_req() {
  SharedDtor();
}

void ping_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ping_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ping_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ping_req_descriptor_;
}

const ping_req& ping_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

ping_req* ping_req::default_instance_ = NULL;

ping_req* ping_req::New() const {
  return new ping_req;
}

void ping_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ping_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ping_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ping_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ping_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ping_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ping_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ping_req::MergeFrom(const ping_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ping_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ping_req::CopyFrom(const ping_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping_req::IsInitialized() const {

  return true;
}

void ping_req::Swap(ping_req* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ping_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ping_req_descriptor_;
  metadata.reflection = ping_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ping_rsp::kIdFieldNumber;
#endif  // !_MSC_VER

ping_rsp::ping_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ping_rsp::InitAsDefaultInstance() {
}

ping_rsp::ping_rsp(const ping_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ping_rsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ping_rsp::~ping_rsp() {
  SharedDtor();
}

void ping_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ping_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ping_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ping_rsp_descriptor_;
}

const ping_rsp& ping_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

ping_rsp* ping_rsp::default_instance_ = NULL;

ping_rsp* ping_rsp::New() const {
  return new ping_rsp;
}

void ping_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ping_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ping_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ping_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ping_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ping_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ping_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ping_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ping_rsp::MergeFrom(const ping_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ping_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ping_rsp::CopyFrom(const ping_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ping_rsp::IsInitialized() const {

  return true;
}

void ping_rsp::Swap(ping_rsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ping_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ping_rsp_descriptor_;
  metadata.reflection = ping_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_req::kAccFieldNumber;
const int login_req::kPwdFieldNumber;
#endif  // !_MSC_VER

login_req::login_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_req::InitAsDefaultInstance() {
}

login_req::login_req(const login_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_req::SharedCtor() {
  _cached_size_ = 0;
  acc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_req::~login_req() {
  SharedDtor();
}

void login_req::SharedDtor() {
  if (acc_ != &::google::protobuf::internal::kEmptyString) {
    delete acc_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_req_descriptor_;
}

const login_req& login_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

login_req* login_req::default_instance_ = NULL;

login_req* login_req::New() const {
  return new login_req;
}

void login_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acc()) {
      if (acc_ != &::google::protobuf::internal::kEmptyString) {
        acc_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acc().data(), this->acc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pwd;
        break;
      }

      // required string pwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->acc(), output);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string acc = 1;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acc().data(), this->acc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->acc(), target);
  }

  // required string pwd = 2;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acc = 1;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc());
    }

    // required string pwd = 2;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_req::MergeFrom(const login_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_req::CopyFrom(const login_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void login_req::Swap(login_req* other) {
  if (other != this) {
    std::swap(acc_, other->acc_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_req_descriptor_;
  metadata.reflection = login_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int login_rsp::kStateFieldNumber;
const int login_rsp::kGameIdFieldNumber;
const int login_rsp::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

login_rsp::login_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void login_rsp::InitAsDefaultInstance() {
}

login_rsp::login_rsp(const login_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void login_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

login_rsp::~login_rsp() {
  SharedDtor();
}

void login_rsp::SharedDtor() {
  if (game_id_ != &::google::protobuf::internal::kEmptyString) {
    delete game_id_;
  }
  if (this != default_instance_) {
  }
}

void login_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* login_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return login_rsp_descriptor_;
}

const login_rsp& login_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

login_rsp* login_rsp::default_instance_ = NULL;

login_rsp* login_rsp::New() const {
  return new login_rsp;
}

void login_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_game_id()) {
      if (game_id_ != &::google::protobuf::internal::kEmptyString) {
        game_id_->clear();
      }
    }
  }
  room_type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool login_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_id;
        break;
      }

      // optional string game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_id().data(), this->game_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_type;
        break;
      }

      // repeated int32 room_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_room_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_room_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void login_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_id(), output);
  }

  // repeated int32 room_type = 3;
  for (int i = 0; i < this->room_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->room_type(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* login_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_id(), target);
  }

  // repeated int32 room_type = 3;
  for (int i = 0; i < this->room_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->room_type(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int login_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional string game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_id());
    }

  }
  // repeated int32 room_type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->room_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->room_type(i));
    }
    total_size += 1 * this->room_type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void login_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const login_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const login_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void login_rsp::MergeFrom(const login_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_type_.MergeFrom(from.room_type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void login_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void login_rsp::CopyFrom(const login_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void login_rsp::Swap(login_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(game_id_, other->game_id_);
    room_type_.Swap(&other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata login_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = login_rsp_descriptor_;
  metadata.reflection = login_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_room_req::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

enter_room_req::enter_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_room_req::InitAsDefaultInstance() {
}

enter_room_req::enter_room_req(const enter_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_room_req::SharedCtor() {
  _cached_size_ = 0;
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_room_req::~enter_room_req() {
  SharedDtor();
}

void enter_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_room_req_descriptor_;
}

const enter_room_req& enter_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

enter_room_req* enter_room_req::default_instance_ = NULL;

enter_room_req* enter_room_req::New() const {
  return new enter_room_req;
}

void enter_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_type = 1;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_room_req::MergeFrom(const enter_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_room_req::CopyFrom(const enter_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_room_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void enter_room_req::Swap(enter_room_req* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_room_req_descriptor_;
  metadata.reflection = enter_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int seat::kNumberFieldNumber;
const int seat::kGameIdFieldNumber;
#endif  // !_MSC_VER

seat::seat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void seat::InitAsDefaultInstance() {
}

seat::seat(const seat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void seat::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

seat::~seat() {
  SharedDtor();
}

void seat::SharedDtor() {
  if (game_id_ != &::google::protobuf::internal::kEmptyString) {
    delete game_id_;
  }
  if (this != default_instance_) {
  }
}

void seat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seat_descriptor_;
}

const seat& seat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

seat* seat::default_instance_ = NULL;

seat* seat::New() const {
  return new seat;
}

void seat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    if (has_game_id()) {
      if (game_id_ != &::google::protobuf::internal::kEmptyString) {
        game_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool seat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_id;
        break;
      }

      // required string game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_id().data(), this->game_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void seat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* seat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int seat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required string game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const seat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const seat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void seat::MergeFrom(const seat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void seat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seat::CopyFrom(const seat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void seat::Swap(seat* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata seat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seat_descriptor_;
  metadata.reflection = seat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_room_rsp::kStateFieldNumber;
const int enter_room_rsp::kRoomUsersFieldNumber;
#endif  // !_MSC_VER

enter_room_rsp::enter_room_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_room_rsp::InitAsDefaultInstance() {
}

enter_room_rsp::enter_room_rsp(const enter_room_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_room_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_room_rsp::~enter_room_rsp() {
  SharedDtor();
}

void enter_room_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_room_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_room_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_room_rsp_descriptor_;
}

const enter_room_rsp& enter_room_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

enter_room_rsp* enter_room_rsp::default_instance_ = NULL;

enter_room_rsp* enter_room_rsp::New() const {
  return new enter_room_rsp;
}

void enter_room_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  room_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_room_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_users;
        break;
      }

      // repeated .fish.seat room_users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_room_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated .fish.seat room_users = 2;
  for (int i = 0; i < this->room_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->room_users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_room_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated .fish.seat room_users = 2;
  for (int i = 0; i < this->room_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->room_users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_room_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .fish.seat room_users = 2;
  total_size += 1 * this->room_users_size();
  for (int i = 0; i < this->room_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_room_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_room_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_room_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_room_rsp::MergeFrom(const enter_room_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_users_.MergeFrom(from.room_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_room_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_room_rsp::CopyFrom(const enter_room_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_room_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < room_users_size(); i++) {
    if (!this->room_users(i).IsInitialized()) return false;
  }
  return true;
}

void enter_room_rsp::Swap(enter_room_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    room_users_.Swap(&other->room_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_room_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_room_rsp_descriptor_;
  metadata.reflection = enter_room_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_room_notify::kNumberFieldNumber;
const int enter_room_notify::kGameIdFieldNumber;
#endif  // !_MSC_VER

enter_room_notify::enter_room_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_room_notify::InitAsDefaultInstance() {
}

enter_room_notify::enter_room_notify(const enter_room_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_room_notify::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  game_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_room_notify::~enter_room_notify() {
  SharedDtor();
}

void enter_room_notify::SharedDtor() {
  if (game_id_ != &::google::protobuf::internal::kEmptyString) {
    delete game_id_;
  }
  if (this != default_instance_) {
  }
}

void enter_room_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_room_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_room_notify_descriptor_;
}

const enter_room_notify& enter_room_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

enter_room_notify* enter_room_notify::default_instance_ = NULL;

enter_room_notify* enter_room_notify::New() const {
  return new enter_room_notify;
}

void enter_room_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    if (has_game_id()) {
      if (game_id_ != &::google::protobuf::internal::kEmptyString) {
        game_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_room_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_game_id;
        break;
      }

      // required string game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_id().data(), this->game_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_room_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_room_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required string game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_id().data(), this->game_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_room_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required string game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_room_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_room_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_room_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_room_notify::MergeFrom(const enter_room_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_room_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_room_notify::CopyFrom(const enter_room_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_room_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void enter_room_notify::Swap(enter_room_notify* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_room_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_room_notify_descriptor_;
  metadata.reflection = enter_room_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fire_req::kAngleFieldNumber;
#endif  // !_MSC_VER

fire_req::fire_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fire_req::InitAsDefaultInstance() {
}

fire_req::fire_req(const fire_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fire_req::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fire_req::~fire_req() {
  SharedDtor();
}

void fire_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fire_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fire_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fire_req_descriptor_;
}

const fire_req& fire_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

fire_req* fire_req::default_instance_ = NULL;

fire_req* fire_req::New() const {
  return new fire_req;
}

void fire_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fire_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 angle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fire_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 angle = 1;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fire_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 angle = 1;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fire_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 angle = 1;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fire_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fire_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fire_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fire_req::MergeFrom(const fire_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fire_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fire_req::CopyFrom(const fire_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fire_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fire_req::Swap(fire_req* other) {
  if (other != this) {
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fire_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fire_req_descriptor_;
  metadata.reflection = fire_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fire_rsp::kStateFieldNumber;
#endif  // !_MSC_VER

fire_rsp::fire_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fire_rsp::InitAsDefaultInstance() {
}

fire_rsp::fire_rsp(const fire_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fire_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fire_rsp::~fire_rsp() {
  SharedDtor();
}

void fire_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fire_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fire_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fire_rsp_descriptor_;
}

const fire_rsp& fire_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

fire_rsp* fire_rsp::default_instance_ = NULL;

fire_rsp* fire_rsp::New() const {
  return new fire_rsp;
}

void fire_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fire_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fire_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fire_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fire_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fire_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fire_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fire_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fire_rsp::MergeFrom(const fire_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fire_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fire_rsp::CopyFrom(const fire_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fire_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void fire_rsp::Swap(fire_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fire_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fire_rsp_descriptor_;
  metadata.reflection = fire_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fire_notify::kNumberFieldNumber;
const int fire_notify::kAngleFieldNumber;
#endif  // !_MSC_VER

fire_notify::fire_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fire_notify::InitAsDefaultInstance() {
}

fire_notify::fire_notify(const fire_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fire_notify::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fire_notify::~fire_notify() {
  SharedDtor();
}

void fire_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fire_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fire_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fire_notify_descriptor_;
}

const fire_notify& fire_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

fire_notify* fire_notify::default_instance_ = NULL;

fire_notify* fire_notify::New() const {
  return new fire_notify;
}

void fire_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fire_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_angle;
        break;
      }

      // required int32 angle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fire_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fire_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required int32 angle = 2;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fire_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fire_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fire_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fire_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fire_notify::MergeFrom(const fire_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fire_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fire_notify::CopyFrom(const fire_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fire_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fire_notify::Swap(fire_notify* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fire_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fire_notify_descriptor_;
  metadata.reflection = fire_notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fish_refresh_notify::kFishIdFieldNumber;
const int fish_refresh_notify::kLineIdFieldNumber;
#endif  // !_MSC_VER

fish_refresh_notify::fish_refresh_notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fish_refresh_notify::InitAsDefaultInstance() {
}

fish_refresh_notify::fish_refresh_notify(const fish_refresh_notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fish_refresh_notify::SharedCtor() {
  _cached_size_ = 0;
  fish_id_ = 0;
  line_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fish_refresh_notify::~fish_refresh_notify() {
  SharedDtor();
}

void fish_refresh_notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fish_refresh_notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fish_refresh_notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fish_refresh_notify_descriptor_;
}

const fish_refresh_notify& fish_refresh_notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fish_2eproto();
  return *default_instance_;
}

fish_refresh_notify* fish_refresh_notify::default_instance_ = NULL;

fish_refresh_notify* fish_refresh_notify::New() const {
  return new fish_refresh_notify;
}

void fish_refresh_notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fish_id_ = 0;
    line_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fish_refresh_notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fish_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fish_id_)));
          set_has_fish_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_line_id;
        break;
      }

      // required int32 line_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fish_refresh_notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fish_id = 1;
  if (has_fish_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fish_id(), output);
  }

  // required int32 line_id = 2;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fish_refresh_notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fish_id = 1;
  if (has_fish_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fish_id(), target);
  }

  // required int32 line_id = 2;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fish_refresh_notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fish_id = 1;
    if (has_fish_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fish_id());
    }

    // required int32 line_id = 2;
    if (has_line_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fish_refresh_notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fish_refresh_notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fish_refresh_notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fish_refresh_notify::MergeFrom(const fish_refresh_notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fish_id()) {
      set_fish_id(from.fish_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fish_refresh_notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fish_refresh_notify::CopyFrom(const fish_refresh_notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fish_refresh_notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void fish_refresh_notify::Swap(fish_refresh_notify* other) {
  if (other != this) {
    std::swap(fish_id_, other->fish_id_);
    std::swap(line_id_, other->line_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fish_refresh_notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fish_refresh_notify_descriptor_;
  metadata.reflection = fish_refresh_notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fish

// @@protoc_insertion_point(global_scope)
